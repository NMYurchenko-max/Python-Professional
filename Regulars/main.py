import csv
import re
from collections import defaultdict
from pprint import pprint


# Создадим функции обработчики
def format_phone_number(phone):
    """
    Функция для форматирования номера телефона.
    Параметры:
    phone (str): Строка, содержащая номер телефона, который необходимо
    отформатировать.
    Возвращает:
    str: Отформатированный номер телефона согласно заданному шаблону.
    Если в номере присутствует добавочный номер,
    он добавляется в конце строки после словосочетания "доб.".

    Логика работы:
    1. Импорт модуля re для работы с регулярными выражениями.
    2. Удаление всех нецифровых символов из входной строки номера телефона,
    оставляя только цифровой состав.
    3. Поиск полного совпадения входной строки с регулярным выражением,
    которое описывает структуру номера телефона:
       - 11 цифр (основной номер),
       - опционально 4 цифры (добавочный номер).
    4. Если совпадение найдено, оно разбивается на две части: основной номер
    и добавочный номер (если таковой имеется).
    5. Основной номер форматируется согласно следующему шаблону:
    "+7(XXX)XXX-XX-XX". Для этого используются методы форматированной
    строки f-string.
    6. Если добавочный номер присутствует, он добавляется в конце
    отформатированной строки после словосочетания "доб.".
    7. В случае, если входная строка не соответствует ожидаемому формату,
    возвращается исходный номер телефона без изменений.

    Пример использования:
    >>> format_phone_number("+71234567890")
    '+7(123)4567890'
    >>> format_phone_number("+712345678901")
    '+7(123)45678901 доб.2345'
    """
    # Удаление всех нецифровых символов из входной строки.
    digits_only = re.sub(r'\D', '', phone)
  
    # Поиск полного совпадения с регулярным выражением.
    match = re.fullmatch(r'(\d{11})(\d{4})?', digits_only)
    
    if match:
        # Разбиение найденного совпадения на основной номер и добавочный номер.
        main_number, ext_number = match.groups()
        
        # Формирование основного номера согласно заданному шаблону.
        formatted_main_number = (
            f"+7({main_number[:3]})"
            f"{main_number[3:6]}"
            f"-{main_number[6:8]}"
            f"-{main_number[8:]}"
        )
        
        # Возвращение отформатированного номера с добавочным номером,
        # если он присутствует.
        return (
            f"{formatted_main_number} доб.{ext_number}"
            if ext_number
            else formatted_main_number
        )
    else:
        # Возвращение исходного номера телефона без изменений,
        # если он не соответствует ожидаемому формату.
        return phone


def merge_contacts(contacts):
    """
    Функция для объединения контактов в список уникальных записей.
    Эта функция принимает список контактов, где каждый контакт представлен
    в виде списка строк,
    содержащих информацию о контакте (например, ФИО, должность,
    номер телефона и т.д.). Функция объединяет контакты с одинаковым
    именем в одну запись, сохраняя все уникальные номера телефонов
    и электронные адреса.
    Args:
        contacts (list of lists):
        Список контактов, где каждый контакт представлен в виде списка строк.
    Returns:
        list: Список уникальных контактов, где каждый контакт представлен
        в виде списка строк.
        Каждая уникальная запись содержит полное имя, должность,
        уникальный номер телефона и электронный адрес.
    """
    merged_contacts = defaultdict(list)
    for contact in contacts[1:]:  
        # Пропускаем заголовок
        full_name = tuple(contact[:3])
        # Используем ФИО как ключ
        merged_contacts[full_name].append(contact)
    result = []
    for name, records in merged_contacts.items():
        record = records[0]
        # Берем первую запись как основу
        for other_record in records[1:]:
            if other_record[-2] and other_record[-2] not in record[-2]:
                record[-2] += ", " + other_record[-2]
            if other_record[-1] and other_record[-1] not in record[-1]:
                record[-1] += ", " + other_record[-1]
        result.append(record)
    return result


# Чтение данных из файла
with open("Regulars/phonebook_raw.csv", encoding="utf-8") as f:
    reader = csv.reader(f, delimiter=",")
    header = next(reader)
    # Считываем заголовок
    contacts_list = list(reader)
    pprint(contacts_list)
    print()
# Разделение ФИО и форматирование номеров телефонов
for contact in contacts_list[1:]:  
    # Пропускаем заголовок
    full_name = " ".join(contact[:3]).split()
    # Обеспечиваем наличие трех элементов в списке
    contact[:3] = full_name[:3] + [""] * (3 - len(full_name))
    # Заменяем первые три элемента на корректно разделенные ФИО
    contact[-2] = format_phone_number(contact[-2])
    # Форматируем номер телефона

# Объединение дублирующихся записей
unique_contacts = merge_contacts(contacts_list)

# Запись результатов в новый файл
with open("Regulars/phonebook.csv", "w", encoding="utf-8", newline='') as f:
    writer = csv.writer(f)
    writer.writerow(header)
    # Добавляем заголовок
    writer.writerows(unique_contacts)

# Вывод списка уникальных данных
for contact in unique_contacts:
    print(contact)

print("Обработка завершена.")
